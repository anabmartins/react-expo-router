{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Constants, { ExecutionEnvironment } from \"expo-constants\";\nimport * as Linking from \"expo-linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { adjustPathname } from \"../fork/extractPathFromURL\";\nimport getPathFromState from \"../fork/getPathFromState\";\nimport getStateFromPath from \"../fork/getStateFromPath\";\nexport function getInitialURL() {\n  return _getInitialURL.apply(this, arguments);\n}\nfunction _getInitialURL() {\n  _getInitialURL = _asyncToGenerator(function* () {\n    if (Platform.OS === \"web\") {\n      var _window$location;\n      if (typeof window === \"undefined\") {\n        return \"\";\n      } else if (typeof ((_window$location = window.location) == null ? void 0 : _window$location.href) === \"string\") {\n        return window.location.href;\n      }\n    }\n    return Promise.race([_asyncToGenerator(function* () {\n      var url = yield Linking.getInitialURL();\n      if (url && Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n        var parsed = Linking.parse(url);\n        if (parsed.path === null || [\"\", \"/\"].includes(adjustPathname({\n          hostname: parsed.hostname,\n          pathname: parsed.path\n        }))) {\n          return getRootURL();\n        }\n      }\n      return url != null ? url : getRootURL();\n    })(), new Promise(function (resolve) {\n      return setTimeout(function () {\n        return resolve(getRootURL());\n      }, 150);\n    })]);\n  });\n  return _getInitialURL.apply(this, arguments);\n}\nvar _rootURL;\nexport function getRootURL() {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL(\"/\");\n  }\n  return _rootURL;\n}\nexport function addEventListener(listener) {\n  var callback = undefined;\n  if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n    callback = function callback(_ref) {\n      var url = _ref.url;\n      var parsed = Linking.parse(url);\n      if (parsed.path === null || [\"\", \"/\"].includes(adjustPathname({\n        hostname: parsed.hostname,\n        pathname: parsed.path\n      }))) {\n        listener(getRootURL());\n      } else {\n        listener(url);\n      }\n    };\n  } else {\n    callback = function callback(_ref2) {\n      var url = _ref2.url;\n      return listener(url);\n    };\n  }\n  var subscription = Linking.addEventListener(\"url\", callback);\n  return function () {\n    subscription.remove == null ? void 0 : subscription.remove();\n  };\n}\nexport { getStateFromPath, getPathFromState };","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","Platform","adjustPathname","getPathFromState","getStateFromPath","getInitialURL","_getInitialURL","apply","arguments","_asyncToGenerator","OS","_window$location","window","location","href","Promise","race","url","executionEnvironment","StoreClient","parsed","parse","path","includes","hostname","pathname","getRootURL","resolve","setTimeout","_rootURL","undefined","createURL","addEventListener","listener","callback","_ref","_ref2","subscription","remove"],"sources":["/home/martz/GitHub/react-expo-router/NavTabs/node_modules/expo-router/src/link/linking.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from \"expo-constants\";\nimport * as Linking from \"expo-linking\";\nimport { Platform } from \"react-native\";\n\nimport { adjustPathname } from \"../fork/extractPathFromURL\";\nimport getPathFromState from \"../fork/getPathFromState\";\nimport getStateFromPath from \"../fork/getStateFromPath\";\n\n// A custom getInitialURL is used on native to ensure the app always starts at\n// the root path if it's launched from something other than a deep link.\n// This helps keep the native functionality working like the web functionality.\n// For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n// then `/index` would be used on web and `/settings` would be used on native.\nexport async function getInitialURL(): Promise<string> {\n  if (Platform.OS === \"web\") {\n    if (typeof window === \"undefined\") {\n      return \"\";\n    } else if (typeof window.location?.href === \"string\") {\n      return window.location.href;\n    }\n  }\n  return Promise.race<string>([\n    (async () => {\n      const url = await Linking.getInitialURL();\n\n      // NOTE(EvanBacon): This could probably be wrapped with the development boundary\n      // since Expo Go is mostly just used in development.\n\n      // Expo Go is weird and requires the root path to be `/--/`\n      if (\n        url &&\n        Constants.executionEnvironment === ExecutionEnvironment.StoreClient\n      ) {\n        const parsed = Linking.parse(url);\n        // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n        // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n        if (\n          parsed.path === null ||\n          [\"\", \"/\"].includes(\n            adjustPathname({\n              hostname: parsed.hostname,\n              pathname: parsed.path,\n            })\n          )\n        ) {\n          return getRootURL();\n        }\n      }\n      // The path will be nullish in bare apps when the app is launched from the home screen.\n      // TODO(EvanBacon): define some policy around notifications.\n      return url ?? getRootURL();\n    })(),\n    new Promise<string>((resolve) =>\n      // Timeout in 150ms if `getInitialState` doesn't resolve\n      // Workaround for https://github.com/facebook/react-native/issues/25675\n      setTimeout(() => resolve(getRootURL()), 150)\n    ),\n  ]);\n}\n\nlet _rootURL: string | undefined;\n\nexport function getRootURL(): string {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL(\"/\");\n  }\n  return _rootURL;\n}\n\nexport function addEventListener(listener: (url: string) => void) {\n  let callback: (({ url }: { url: string }) => void) | undefined = undefined;\n\n  if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n    // This extra work is only done in the Expo Go app.\n    callback = ({ url }: { url: string }) => {\n      const parsed = Linking.parse(url);\n\n      // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n      // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n      if (\n        parsed.path === null ||\n        [\"\", \"/\"].includes(\n          adjustPathname({ hostname: parsed.hostname, pathname: parsed.path })\n        )\n      ) {\n        listener(getRootURL());\n      } else {\n        listener(url);\n      }\n    };\n  } else {\n    callback = ({ url }: { url: string }) => listener(url);\n  }\n  const subscription = Linking.addEventListener(\"url\", callback);\n\n  return () => {\n    // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n    subscription.remove?.();\n  };\n}\n\nexport { getStateFromPath, getPathFromState };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}