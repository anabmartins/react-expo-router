{"ast":null,"code":"import { LinkingContext } from \"@react-navigation/native\";\nimport * as React from \"react\";\nexport function useLinkingContext() {\n  var linking = React.useContext(LinkingContext);\n  var options = linking.options;\n  assertLinkingOptions(options);\n  return options;\n}\nfunction assertLinkingOptions(options) {\n  if (!(options != null && options.config)) {\n    throw new Error(\"Couldn't find a linking config. Is your component inside a navigator?\");\n  }\n}","map":{"version":3,"names":["LinkingContext","React","useLinkingContext","linking","useContext","options","assertLinkingOptions","config","Error"],"sources":["/home/martz/GitHub/react-expo-router/NavTabs/node_modules/expo-router/src/link/useLinkingContext.ts"],"sourcesContent":["import {\n  LinkingContext,\n  LinkingOptions,\n  ParamListBase,\n} from \"@react-navigation/native\";\nimport * as React from \"react\";\n\nimport getPathFromState from \"../fork/getPathFromState\";\n\nexport type RouterLinkingContext = Required<\n  Omit<LinkingOptions<ParamListBase>, \"filter\" | \"enabled\">\n> & {\n  getPathFromState: typeof getPathFromState;\n};\n\nexport function useLinkingContext(): RouterLinkingContext {\n  const linking = React.useContext(LinkingContext);\n\n  const { options } = linking;\n\n  assertLinkingOptions(options);\n\n  return options;\n}\n\nfunction assertLinkingOptions(\n  options: LinkingOptions<ParamListBase> | undefined\n): asserts options is RouterLinkingContext {\n  if (!options?.config) {\n    // This should never happen in Expo Router.\n    throw new Error(\n      \"Couldn't find a linking config. Is your component inside a navigator?\"\n    );\n  }\n}\n"],"mappings":"AAAA,SACEA,cAAc,QAGT,0BAA0B;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAU9B,OAAO,SAASC,iBAAiBA,CAAA,EAAyB;EACxD,IAAMC,OAAO,GAAGF,KAAK,CAACG,UAAU,CAACJ,cAAc,CAAC;EAEhD,IAAQK,OAAO,GAAKF,OAAO,CAAnBE,OAAO;EAEfC,oBAAoB,CAACD,OAAO,CAAC;EAE7B,OAAOA,OAAO;AAChB;AAEA,SAASC,oBAAoBA,CAC3BD,OAAkD,EACT;EACzC,IAAI,EAACA,OAAO,YAAPA,OAAO,CAAEE,MAAM,GAAE;IAEpB,MAAM,IAAIC,KAAK,CACb,uEACF,CAAC;EACH;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}