{"ast":null,"code":"import { getActionFromState } from \"@react-navigation/native\";\nimport { getReactNavigationConfig } from \"./getReactNavigationConfig\";\nimport { addEventListener, getInitialURL, getPathFromState, getStateFromPath } from \"./link/linking\";\nexport function getNavigationConfig(routes) {\n  return getReactNavigationConfig(routes, true);\n}\nexport function getLinkingConfig(routes) {\n  return {\n    prefixes: [],\n    config: getNavigationConfig(routes),\n    getInitialURL: getInitialURL,\n    subscribe: addEventListener,\n    getStateFromPath: getStateFromPathMemoized,\n    getPathFromState: getPathFromState,\n    getActionFromState: getActionFromState\n  };\n}\nvar stateCache = new Map();\nfunction getStateFromPathMemoized(path, options) {\n  var cached = stateCache.get(path);\n  if (cached) {\n    return cached;\n  }\n  var result = getStateFromPath(path, options);\n  stateCache.set(path, result);\n  return result;\n}","map":{"version":3,"names":["getActionFromState","getReactNavigationConfig","addEventListener","getInitialURL","getPathFromState","getStateFromPath","getNavigationConfig","routes","getLinkingConfig","prefixes","config","subscribe","getStateFromPathMemoized","stateCache","Map","path","options","cached","get","result","set"],"sources":["/home/martz/GitHub/react-expo-router/NavTabs/node_modules/expo-router/src/getLinkingConfig.ts"],"sourcesContent":["import { getActionFromState, LinkingOptions } from \"@react-navigation/native\";\n\nimport { RouteNode } from \"./Route\";\nimport { getReactNavigationConfig, Screen } from \"./getReactNavigationConfig\";\nimport {\n  addEventListener,\n  getInitialURL,\n  getPathFromState,\n  getStateFromPath,\n} from \"./link/linking\";\n\nexport function getNavigationConfig(routes: RouteNode): {\n  initialRouteName?: string;\n  screens: Record<string, Screen>;\n} {\n  return getReactNavigationConfig(routes, true);\n}\n\nexport function getLinkingConfig(routes: RouteNode): LinkingOptions<object> {\n  return {\n    prefixes: [],\n    // @ts-expect-error\n    config: getNavigationConfig(routes),\n    // A custom getInitialURL is used on native to ensure the app always starts at\n    // the root path if it's launched from something other than a deep link.\n    // This helps keep the native functionality working like the web functionality.\n    // For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n    // then `/index` would be used on web and `/settings` would be used on native.\n    getInitialURL,\n    subscribe: addEventListener,\n    getStateFromPath: getStateFromPathMemoized,\n    getPathFromState,\n\n    // Add all functions to ensure the types never need to fallback.\n    // This is a convenience for usage in the package.\n    getActionFromState,\n  };\n}\n\nconst stateCache = new Map<string, any>();\n\n/** We can reduce work by memoizing the state by the pathname. This only works because the options (linking config) theoretically never change.  */\nfunction getStateFromPathMemoized(\n  path: string,\n  options: Parameters<typeof getStateFromPath>[1]\n) {\n  const cached = stateCache.get(path);\n  if (cached) {\n    return cached;\n  }\n  const result = getStateFromPath(path, options);\n  stateCache.set(path, result);\n  return result;\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAwB,0BAA0B;AAG7E,SAASC,wBAAwB;AACjC,SACEC,gBAAgB,EAChBC,aAAa,EACbC,gBAAgB,EAChBC,gBAAgB;AAGlB,OAAO,SAASC,mBAAmBA,CAACC,MAAiB,EAGnD;EACA,OAAON,wBAAwB,CAACM,MAAM,EAAE,IAAI,CAAC;AAC/C;AAEA,OAAO,SAASC,gBAAgBA,CAACD,MAAiB,EAA0B;EAC1E,OAAO;IACLE,QAAQ,EAAE,EAAE;IAEZC,MAAM,EAAEJ,mBAAmB,CAACC,MAAM,CAAC;IAMnCJ,aAAa,EAAbA,aAAa;IACbQ,SAAS,EAAET,gBAAgB;IAC3BG,gBAAgB,EAAEO,wBAAwB;IAC1CR,gBAAgB,EAAhBA,gBAAgB;IAIhBJ,kBAAkB,EAAlBA;EACF,CAAC;AACH;AAEA,IAAMa,UAAU,GAAG,IAAIC,GAAG,CAAc,CAAC;AAGzC,SAASF,wBAAwBA,CAC/BG,IAAY,EACZC,OAA+C,EAC/C;EACA,IAAMC,MAAM,GAAGJ,UAAU,CAACK,GAAG,CAACH,IAAI,CAAC;EACnC,IAAIE,MAAM,EAAE;IACV,OAAOA,MAAM;EACf;EACA,IAAME,MAAM,GAAGd,gBAAgB,CAACU,IAAI,EAAEC,OAAO,CAAC;EAC9CH,UAAU,CAACO,GAAG,CAACL,IAAI,EAAEI,MAAM,CAAC;EAC5B,OAAOA,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}