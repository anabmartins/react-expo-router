{"ast":null,"code":"import * as SplashModule from \"expo-splash-screen\";\nimport { nanoid } from \"nanoid/non-secure\";\nimport * as React from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar globalStack = [];\nexport function SplashScreen() {\n  useGlobalSplash();\n  return null;\n}\nfunction useGlobalSplash() {\n  var stack = React.useRef(null);\n  React.useEffect(function () {\n    stack.current = SplashScreen._pushEntry();\n    return function () {\n      if (stack.current) {\n        SplashScreen._popEntry(stack.current);\n      }\n    };\n  }, []);\n}\nSplashScreen.hideAsync = function () {\n  SplashModule.hideAsync();\n  globalStack.length = 0;\n};\nvar _preventAutoHideAsyncInvoked = false;\nSplashScreen.preventAutoHideAsync = function () {\n  var _ErrorUtils;\n  if (_preventAutoHideAsyncInvoked) {\n    return;\n  }\n  _preventAutoHideAsyncInvoked = true;\n  if (Platform.OS !== \"web\" && (_ErrorUtils = ErrorUtils) != null && _ErrorUtils.getGlobalHandler) {\n    var originalHandler = ErrorUtils.getGlobalHandler();\n    ErrorUtils.setGlobalHandler(function (error, isFatal) {\n      SplashScreen.hideAsync();\n      originalHandler(error, isFatal);\n    });\n  }\n  SplashModule.preventAutoHideAsync();\n};\nSplashScreen._pushEntry = function () {\n  var entry = nanoid();\n  globalStack.push(entry);\n  SplashScreen.preventAutoHideAsync();\n  return entry;\n};\nSplashScreen._popEntry = function (entry) {\n  var index = globalStack.indexOf(entry);\n  if (index !== -1) {\n    globalStack.splice(index, 1);\n  }\n  if (globalStack.length === 0) {\n    SplashScreen.hideAsync();\n  }\n};","map":{"version":3,"names":["SplashModule","nanoid","React","Platform","globalStack","SplashScreen","useGlobalSplash","stack","useRef","useEffect","current","_pushEntry","_popEntry","hideAsync","length","_preventAutoHideAsyncInvoked","preventAutoHideAsync","_ErrorUtils","OS","ErrorUtils","getGlobalHandler","originalHandler","setGlobalHandler","error","isFatal","entry","push","index","indexOf","splice"],"sources":["/home/martz/GitHub/react-expo-router/NavTabs/node_modules/expo-router/src/views/Splash.tsx"],"sourcesContent":["import * as SplashModule from \"expo-splash-screen\";\nimport { nanoid } from \"nanoid/non-secure\";\nimport * as React from \"react\";\nimport { Platform } from \"react-native\";\n\nconst globalStack: string[] = [];\n\n/**\n * A stack based component for keeping the splash screen visible.\n * Useful for stacked requests that need to be completed before the app is ready.\n * After all instances have been unmounted, the splash screen will be hidden.\n *\n * @example\n * ```tsx\n * function App() {\n *   const [isLoading, setIsLoading] = React.useState(true);\n *\n *   if (isLoading) {\n *     return <SplashScreen />\n *   }\n *\n *   return <Text>Ready!</Text>\n * }\n * ```\n */\nexport function SplashScreen() {\n  useGlobalSplash();\n  return null;\n}\n\nfunction useGlobalSplash() {\n  const stack = React.useRef<string | null>(null);\n\n  React.useEffect(() => {\n    // Create a stack entry on component mount\n    stack.current = SplashScreen._pushEntry();\n    return () => {\n      if (stack.current) {\n        // Update on component unmount\n        SplashScreen._popEntry(stack.current);\n      }\n    };\n  }, []);\n}\n\nSplashScreen.hideAsync = () => {\n  SplashModule.hideAsync();\n  globalStack.length = 0;\n};\n\nlet _preventAutoHideAsyncInvoked = false;\n\nSplashScreen.preventAutoHideAsync = () => {\n  // Memoize, this should only be called once.\n  if (_preventAutoHideAsyncInvoked) {\n    return;\n  }\n  _preventAutoHideAsyncInvoked = true;\n  // Append error handling to ensure any uncaught exceptions result in the splash screen being hidden.\n  if (Platform.OS !== \"web\" && ErrorUtils?.getGlobalHandler) {\n    const originalHandler = ErrorUtils.getGlobalHandler();\n    ErrorUtils.setGlobalHandler((error, isFatal) => {\n      SplashScreen.hideAsync();\n      originalHandler(error, isFatal);\n    });\n  }\n  SplashModule.preventAutoHideAsync();\n};\n\nSplashScreen._pushEntry = (): any => {\n  const entry = nanoid();\n  globalStack.push(entry);\n  SplashScreen.preventAutoHideAsync();\n  return entry;\n};\n\nSplashScreen._popEntry = (entry: string) => {\n  const index = globalStack.indexOf(entry);\n  if (index !== -1) {\n    globalStack.splice(index, 1);\n  }\n  if (globalStack.length === 0) {\n    SplashScreen.hideAsync();\n  }\n};\n\n// TODO: Add some detection for if the splash screen is visible\n"],"mappings":"AAAA,OAAO,KAAKA,YAAY,MAAM,oBAAoB;AAClD,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,OAAAC,QAAA;AAG/B,IAAMC,WAAqB,GAAG,EAAE;AAoBhC,OAAO,SAASC,YAAYA,CAAA,EAAG;EAC7BC,eAAe,CAAC,CAAC;EACjB,OAAO,IAAI;AACb;AAEA,SAASA,eAAeA,CAAA,EAAG;EACzB,IAAMC,KAAK,GAAGL,KAAK,CAACM,MAAM,CAAgB,IAAI,CAAC;EAE/CN,KAAK,CAACO,SAAS,CAAC,YAAM;IAEpBF,KAAK,CAACG,OAAO,GAAGL,YAAY,CAACM,UAAU,CAAC,CAAC;IACzC,OAAO,YAAM;MACX,IAAIJ,KAAK,CAACG,OAAO,EAAE;QAEjBL,YAAY,CAACO,SAAS,CAACL,KAAK,CAACG,OAAO,CAAC;MACvC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;AACR;AAEAL,YAAY,CAACQ,SAAS,GAAG,YAAM;EAC7Bb,YAAY,CAACa,SAAS,CAAC,CAAC;EACxBT,WAAW,CAACU,MAAM,GAAG,CAAC;AACxB,CAAC;AAED,IAAIC,4BAA4B,GAAG,KAAK;AAExCV,YAAY,CAACW,oBAAoB,GAAG,YAAM;EAAA,IAAAC,WAAA;EAExC,IAAIF,4BAA4B,EAAE;IAChC;EACF;EACAA,4BAA4B,GAAG,IAAI;EAEnC,IAAIZ,QAAQ,CAACe,EAAE,KAAK,KAAK,KAAAD,WAAA,GAAIE,UAAU,aAAVF,WAAA,CAAYG,gBAAgB,EAAE;IACzD,IAAMC,eAAe,GAAGF,UAAU,CAACC,gBAAgB,CAAC,CAAC;IACrDD,UAAU,CAACG,gBAAgB,CAAC,UAACC,KAAK,EAAEC,OAAO,EAAK;MAC9CnB,YAAY,CAACQ,SAAS,CAAC,CAAC;MACxBQ,eAAe,CAACE,KAAK,EAAEC,OAAO,CAAC;IACjC,CAAC,CAAC;EACJ;EACAxB,YAAY,CAACgB,oBAAoB,CAAC,CAAC;AACrC,CAAC;AAEDX,YAAY,CAACM,UAAU,GAAG,YAAW;EACnC,IAAMc,KAAK,GAAGxB,MAAM,CAAC,CAAC;EACtBG,WAAW,CAACsB,IAAI,CAACD,KAAK,CAAC;EACvBpB,YAAY,CAACW,oBAAoB,CAAC,CAAC;EACnC,OAAOS,KAAK;AACd,CAAC;AAEDpB,YAAY,CAACO,SAAS,GAAG,UAACa,KAAa,EAAK;EAC1C,IAAME,KAAK,GAAGvB,WAAW,CAACwB,OAAO,CAACH,KAAK,CAAC;EACxC,IAAIE,KAAK,KAAK,CAAC,CAAC,EAAE;IAChBvB,WAAW,CAACyB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;EAC9B;EACA,IAAIvB,WAAW,CAACU,MAAM,KAAK,CAAC,EAAE;IAC5BT,YAAY,CAACQ,SAAS,CAAC,CAAC;EAC1B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}