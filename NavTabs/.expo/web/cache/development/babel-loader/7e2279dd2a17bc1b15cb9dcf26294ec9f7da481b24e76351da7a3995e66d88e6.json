{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useRoute } from \"@react-navigation/native\";\nimport React from \"react\";\nimport { getNavigationContainerRef } from \"./NavigationContainer\";\nimport { deepEqual, getPathDataFromState } from \"./fork/getPathFromState\";\nimport { useLinkingContext } from \"./link/useLinkingContext\";\nimport { useServerState } from \"./static/useServerState\";\nimport { useInitialRootStateContext } from \"./useInitialRootStateContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction getRouteInfoFromState(getPathFromState, state) {\n  var _getPathFromState = getPathFromState(state, false),\n    path = _getPathFromState.path;\n  var qualified = getPathFromState(state, true);\n  return _objectSpread({\n    pathname: path.split(\"?\")[\"0\"]\n  }, getNormalizedStatePath(qualified));\n}\nfunction compareRouteInfo(a, b) {\n  return a.segments.length === b.segments.length && a.segments.every(function (segment, index) {\n    return segment === b.segments[index];\n  }) && a.pathname === b.pathname && compareUrlSearchParams(a.params, b.params);\n}\nexport function compareUrlSearchParams(a, b) {\n  return deepEqual(a, b);\n}\nfunction useSafeInitialRootState() {\n  var serverState = useServerState();\n  var initialRootState = useInitialRootStateContext();\n  return React.useMemo(function () {\n    if (serverState) {\n      return serverState;\n    }\n    if (getNavigationContainerRef().isReady()) {\n      var _getNavigationContain;\n      return (_getNavigationContain = getNavigationContainerRef().getRootState()) != null ? _getNavigationContain : initialRootState;\n    }\n    return initialRootState;\n  }, []);\n}\nfunction useUrlObject() {\n  var getPathFromState = useGetPathFromState();\n  var _React$useState = React.useState(getRouteInfoFromState(getPathFromState, useSafeInitialRootState())),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    routeInfo = _React$useState2[0],\n    setRouteInfo = _React$useState2[1];\n  var routeInfoRef = React.useRef(routeInfo);\n  React.useEffect(function () {\n    routeInfoRef.current = routeInfo;\n  }, [routeInfo]);\n  var maybeUpdateRouteInfo = React.useCallback(function (state) {\n    if (!state) {\n      return;\n    }\n    var newRouteInfo = getRouteInfoFromState(getPathFromState, state);\n    if (!compareRouteInfo(routeInfoRef.current, newRouteInfo)) {\n      setRouteInfo(newRouteInfo);\n    }\n  }, [getPathFromState]);\n  React.useEffect(function () {\n    var rootNavigation = getNavigationContainerRef();\n    return rootNavigation.addListener(\"state\", function (_ref) {\n      var _rootNavigation$getRo;\n      var data = _ref.data;\n      var navigationState = (_rootNavigation$getRo = rootNavigation.getRootState()) != null ? _rootNavigation$getRo : data.state;\n      maybeUpdateRouteInfo(navigationState);\n    });\n  }, [maybeUpdateRouteInfo]);\n  return routeInfo;\n}\nfunction useGetPathFromState() {\n  var linking = useLinkingContext();\n  return React.useCallback(function (state, asPath) {\n    return getPathDataFromState(state, _objectSpread(_objectSpread({}, linking.config), {}, {\n      preserveDynamicRoutes: asPath,\n      preserveGroups: asPath\n    }));\n  }, [linking]);\n}\nexport function getNormalizedStatePath(_ref2) {\n  var statePath = _ref2.path,\n    params = _ref2.params;\n  var _statePath$split = statePath.split(\"?\"),\n    _statePath$split2 = _slicedToArray(_statePath$split, 1),\n    pathname = _statePath$split2[0];\n  return {\n    segments: pathname.split(\"/\").filter(Boolean).map(decodeURIComponent),\n    params: Object.entries(params).reduce(function (prev, _ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n      if (Array.isArray(value)) {\n        prev[key] = value.map(decodeURIComponent);\n      } else {\n        prev[key] = decodeURIComponent(value);\n      }\n      return prev;\n    }, {})\n  };\n}\nvar LocationContext = React.createContext(undefined);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"LocationContext\";\n}\nexport function LocationProvider(_ref5) {\n  var children = _ref5.children;\n  return _jsx(LocationContext.Provider, {\n    value: useUrlObject(),\n    children: children\n  });\n}\nfunction useLocation() {\n  var location = React.useContext(LocationContext);\n  if (!location) {\n    throw new Error(\"Location context is missing. Make sure you are rendering a <LocationProvider />.\");\n  }\n  return location;\n}\nexport function usePathname() {\n  return useLocation().pathname;\n}\nexport function useSearchParams() {\n  return useLocation().params;\n}\nexport function useLocalSearchParams() {\n  var _useRoute$params, _useRoute;\n  return (_useRoute$params = (_useRoute = useRoute()) == null ? void 0 : _useRoute.params) != null ? _useRoute$params : {};\n}\nexport function useSegments() {\n  return useLocation().segments;\n}","map":{"version":3,"names":["useRoute","React","getNavigationContainerRef","deepEqual","getPathDataFromState","useLinkingContext","useServerState","useInitialRootStateContext","jsx","_jsx","getRouteInfoFromState","getPathFromState","state","_getPathFromState","path","qualified","_objectSpread","pathname","split","getNormalizedStatePath","compareRouteInfo","a","b","segments","length","every","segment","index","compareUrlSearchParams","params","useSafeInitialRootState","serverState","initialRootState","useMemo","isReady","_getNavigationContain","getRootState","useUrlObject","useGetPathFromState","_React$useState","useState","_React$useState2","_slicedToArray","routeInfo","setRouteInfo","routeInfoRef","useRef","useEffect","current","maybeUpdateRouteInfo","useCallback","newRouteInfo","rootNavigation","addListener","_ref","_rootNavigation$getRo","data","navigationState","linking","asPath","config","preserveDynamicRoutes","preserveGroups","_ref2","statePath","_statePath$split","_statePath$split2","filter","Boolean","map","decodeURIComponent","Object","entries","reduce","prev","_ref3","_ref4","key","value","Array","isArray","LocationContext","createContext","undefined","process","env","NODE_ENV","displayName","LocationProvider","_ref5","children","Provider","useLocation","location","useContext","Error","usePathname","useSearchParams","useLocalSearchParams","_useRoute$params","_useRoute","useSegments"],"sources":["/home/martz/GitHub/react-expo-router/NavTabs/node_modules/expo-router/src/LocationProvider.tsx"],"sourcesContent":["import { useRoute } from \"@react-navigation/native\";\nimport React from \"react\";\n\nimport { getNavigationContainerRef } from \"./NavigationContainer\";\nimport getPathFromState, {\n  deepEqual,\n  getPathDataFromState,\n  State,\n} from \"./fork/getPathFromState\";\nimport { useLinkingContext } from \"./link/useLinkingContext\";\nimport { useServerState } from \"./static/useServerState\";\nimport { useInitialRootStateContext } from \"./useInitialRootStateContext\";\n\ntype SearchParams = Record<string, string | string[]>;\n\ntype UrlObject = {\n  pathname: string;\n  readonly params: SearchParams;\n  segments: string[];\n};\n\nfunction getRouteInfoFromState(\n  getPathFromState: (\n    state: State,\n    asPath: boolean\n  ) => { path: string; params: any },\n  state: State\n): UrlObject {\n  const { path } = getPathFromState(state, false);\n  const qualified = getPathFromState(state, true);\n  return {\n    pathname: path.split(\"?\")[\"0\"],\n    ...getNormalizedStatePath(qualified),\n  };\n}\n\nfunction compareRouteInfo(a: UrlObject, b: UrlObject) {\n  return (\n    a.segments.length === b.segments.length &&\n    a.segments.every((segment, index) => segment === b.segments[index]) &&\n    a.pathname === b.pathname &&\n    compareUrlSearchParams(a.params, b.params)\n  );\n}\n\nexport function compareUrlSearchParams(\n  a: SearchParams,\n  b: SearchParams\n): boolean {\n  return deepEqual(a, b);\n}\n\nfunction useSafeInitialRootState() {\n  const serverState = useServerState();\n  const initialRootState = useInitialRootStateContext();\n\n  return React.useMemo(() => {\n    if (serverState) {\n      return serverState;\n    }\n\n    // Check if \"is ready\" to prevent `console.error`s\n    if (getNavigationContainerRef().isReady()) {\n      return getNavigationContainerRef().getRootState() ?? initialRootState;\n    }\n\n    return initialRootState;\n  }, []);\n}\n\nfunction useUrlObject(): UrlObject {\n  const getPathFromState = useGetPathFromState();\n\n  const [routeInfo, setRouteInfo] = React.useState<UrlObject>(\n    getRouteInfoFromState(\n      getPathFromState,\n      // If the root state (from upstream) is not ready, use the hacky initial state.\n      // Initial state can be generate because it assumes the linking configuration never changes.\n      useSafeInitialRootState()\n    )\n  );\n\n  const routeInfoRef = React.useRef(routeInfo);\n\n  React.useEffect(() => {\n    routeInfoRef.current = routeInfo;\n  }, [routeInfo]);\n\n  const maybeUpdateRouteInfo = React.useCallback(\n    (state: State) => {\n      // The state can be undefined when hot reloading a Layout Route on native.\n      if (!state) {\n        return;\n      }\n      // Prevent unnecessary updates\n      const newRouteInfo = getRouteInfoFromState(getPathFromState, state);\n      if (!compareRouteInfo(routeInfoRef.current, newRouteInfo)) {\n        setRouteInfo(newRouteInfo);\n      }\n    },\n    [\n      // TODO: This probably never changes\n      getPathFromState,\n    ]\n  );\n\n  React.useEffect(() => {\n    const rootNavigation = getNavigationContainerRef();\n\n    return rootNavigation.addListener(\"state\", ({ data }) => {\n      // Attempt to use the complete state from the root, otherwise this will default to\n      // sending events from the nearest layout.\n      const navigationState =\n        rootNavigation.getRootState() ?? (data.state as unknown as State);\n      // NOTE(EvanBacon): It's probably worth asserting if the root state is missing here.\n      maybeUpdateRouteInfo(navigationState);\n    });\n  }, [maybeUpdateRouteInfo]);\n\n  return routeInfo;\n}\n\nfunction useGetPathFromState() {\n  const linking = useLinkingContext();\n\n  return React.useCallback(\n    (state: Parameters<typeof getPathFromState>[0], asPath: boolean) => {\n      return getPathDataFromState(state, {\n        ...linking.config,\n        preserveDynamicRoutes: asPath,\n        preserveGroups: asPath,\n      });\n    },\n    [linking]\n  );\n}\n\n// TODO: Split up getPathFromState to return all this info at once.\nexport function getNormalizedStatePath({\n  path: statePath,\n  params,\n}: {\n  path: string;\n  params: any;\n}): Omit<UrlObject, \"pathname\"> {\n  const [pathname] = statePath.split(\"?\");\n  return {\n    // Strip empty path at the start\n    segments: pathname.split(\"/\").filter(Boolean).map(decodeURIComponent),\n    // TODO: This is not efficient, we should generate based on the state instead\n    // of converting to string then back to object\n    params: Object.entries(params).reduce((prev, [key, value]) => {\n      if (Array.isArray(value)) {\n        prev[key] = value.map(decodeURIComponent);\n      } else {\n        prev[key] = decodeURIComponent(value as string);\n      }\n      return prev;\n    }, {} as SearchParams),\n  };\n}\n\nconst LocationContext = React.createContext<UrlObject | undefined>(undefined);\n\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"LocationContext\";\n}\n\nexport function LocationProvider({ children }: { children: React.ReactNode }) {\n  return (\n    <LocationContext.Provider value={useUrlObject()}>\n      {children}\n    </LocationContext.Provider>\n  );\n}\n\nfunction useLocation() {\n  const location = React.useContext(LocationContext);\n\n  if (!location) {\n    throw new Error(\n      \"Location context is missing. Make sure you are rendering a <LocationProvider />.\"\n    );\n  }\n\n  return location;\n}\n\n/** @returns Currently selected route as a normalized string without search parameters. e.g. `/acme?foo=bar` -> `/acme`. Segments will be normalized: `/[id]?id=normal` -> `/normal` */\nexport function usePathname(): string {\n  return useLocation().pathname;\n}\n\n/** @returns Current URL Search Parameters. */\nexport function useSearchParams<\n  TParams extends SearchParams = SearchParams\n>(): Partial<TParams> {\n  return useLocation().params as Partial<TParams>;\n}\n\n/** @returns Current URL Search Parameters that only update when the path matches the current route. */\nexport function useLocalSearchParams<\n  TParams extends SearchParams = SearchParams\n>(): Partial<TParams> {\n  return (useRoute()?.params ?? ({} as any)) as Partial<TParams>;\n}\n\n/** @returns Array of selected segments. */\nexport function useSegments(): string[] {\n  return useLocation().segments;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}