{"ast":null,"code":"import React, { createContext, useContext } from \"react\";\nimport { useInitialRootState } from \"./useInitialRootState\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var InitialRootStateContext = createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  InitialRootStateContext.displayName = \"InitialRootStateContext\";\n}\nexport function useInitialRootStateContext() {\n  var state = useContext(InitialRootStateContext);\n  if (!state) {\n    throw new Error(\"useInitialRootStateContext is being used outside of InitialRootStateContext.Provider\");\n  }\n  return state;\n}\nexport function InitialRootStateProvider(_ref) {\n  var children = _ref.children;\n  var state = useInitialRootState();\n  if (!state) {\n    return null;\n  }\n  return _jsx(InitialRootStateContext.Provider, {\n    value: state,\n    children: children\n  });\n}","map":{"version":3,"names":["React","createContext","useContext","useInitialRootState","jsx","_jsx","InitialRootStateContext","process","env","NODE_ENV","displayName","useInitialRootStateContext","state","Error","InitialRootStateProvider","_ref","children","Provider","value"],"sources":["/home/martz/GitHub/react-expo-router/NavTabs/node_modules/expo-router/src/useInitialRootStateContext.tsx"],"sourcesContent":["import React, { createContext, useContext } from \"react\";\n\nimport { State } from \"./fork/getPathFromState\";\nimport { useInitialRootState } from \"./useInitialRootState\";\n\nexport const InitialRootStateContext = createContext<State | null>(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  InitialRootStateContext.displayName = \"InitialRootStateContext\";\n}\n\n/** Fetch the initial root navigation state instantly on web and slightly delayed on native. */\nexport function useInitialRootStateContext() {\n  const state = useContext(InitialRootStateContext);\n  if (!state) {\n    throw new Error(\n      \"useInitialRootStateContext is being used outside of InitialRootStateContext.Provider\"\n    );\n  }\n  return state;\n}\n\n/**\n * Unlike React Navigation, we statically know the config and always assume a URL is available.\n * This enables us to always know the root state.\n */\nexport function InitialRootStateProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const state = useInitialRootState();\n\n  // TODO: This is only used on native but it shouldn't be used at all.\n  if (!state) {\n    // Prevent all rendering until we have the initial root state.\n    // Probably React Navigation should be doing this for us.\n    return null;\n  }\n\n  return (\n    <InitialRootStateContext.Provider value={state}>\n      {children}\n    </InitialRootStateContext.Provider>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAGxD,SAASC,mBAAmB;AAAgC,SAAAC,GAAA,IAAAC,IAAA;AAE5D,OAAO,IAAMC,uBAAuB,GAAGL,aAAa,CAAe,IAAI,CAAC;AAExE,IAAIM,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCH,uBAAuB,CAACI,WAAW,GAAG,yBAAyB;AACjE;AAGA,OAAO,SAASC,0BAA0BA,CAAA,EAAG;EAC3C,IAAMC,KAAK,GAAGV,UAAU,CAACI,uBAAuB,CAAC;EACjD,IAAI,CAACM,KAAK,EAAE;IACV,MAAM,IAAIC,KAAK,CACb,sFACF,CAAC;EACH;EACA,OAAOD,KAAK;AACd;AAMA,OAAO,SAASE,wBAAwBA,CAAAC,IAAA,EAIrC;EAAA,IAHDC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EAIR,IAAMJ,KAAK,GAAGT,mBAAmB,CAAC,CAAC;EAGnC,IAAI,CAACS,KAAK,EAAE;IAGV,OAAO,IAAI;EACb;EAEA,OACEP,IAAA,CAACC,uBAAuB,CAACW,QAAQ;IAACC,KAAK,EAAEN,KAAM;IAAAI,QAAA,EAC5CA;EAAQ,CACuB,CAAC;AAEvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}